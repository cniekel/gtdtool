#!/usr/bin/env python2.5
# vim:ft=python

import os
import stat
from optparse import OptionParser
import logging
import re
from textwrap import wrap
import sys
import gtdpdfprinter

logging.basicConfig(level=logging.INFO)
actionmatcher = re.compile('^(?P<code>[@-])(?P<list>[a-zA-Z0-9]*)[ :](?P<what>.*)$')
#lists = {}
gtd_dir = '~/gtd/'
actionlog = logging.getLogger('action')

flowlog = logging.getLogger('programflow')

autohidden = ('waiting', 'waitfor', 'maybe', 'someday', 'defer')

if 0:
    import warnings
    def nothing(*args):
        pass
    warnings.showwarning = nothing

def print_file(fname):
    if sys.platform == 'win32':
        import win32api

        filename = 'gtdlist.pdf'
        win32api.ShellExecute ( 0, "print", filename, None, ".", 0)
    else:
        print 'printing not yet supported for your platform'
        print 'The pdf file is %s' % fname
        if sys.platform == 'linux':
            print 'Can I just do lpr %s now?' % fname

class ActionList(object):
    """ Keep a list of all actions, both outstanding and completed, and
    grouped in categories. """

    def __init__(self):
        self.lists = {}
        self.showcategories = []
        self.showcompleted = False
    def add(self, list, action):
        if not self.lists.has_key(list):
            self.lists[list] = []
        self.lists[list].append(action)

    def filter(self, options):
        """ Filter the actionlist according to user-request."""
        if not options.category:
            self.showcategories = self.lists.keys()
            if not options.use_all_categories:
                self.showcategories = [ s for s in self.showcategories 
                        if s not in autohidden ]
                self.showcategories.sort()
        else:
            self.showcategories = options.category.split(':')

        if options.exclude:
            for c in options.exclude.split(':'):
                try:
                    self.showcategories.remove(c)
                except ValueError:
                    pass
        self.showcompleted = options.verbose

    def getFilteredElements(self):
        categories = {}
        for s in self.showcategories:
            if s in self.lists.keys():
                l = [a for a in self.lists[s] 
                        if a.isUnfinished() or self.showcompleted]
                if l:
                    categories[s] = l

        return categories

class ActionItem(object):
    """ An actionable item. It belongs to a 'list' (category or context),
    has a code (@ or -) which indicates whether it's done or not, and is
    part of a project. """
    actionlist = ActionList()
    def __init__(self, list, code, what, project):
        self.list = list
        self.code = code
        self.what = what
        self.project = project

        actionlog.debug('Action for list "%s", from project %s', list,
                project)

        self.actionlist.add(self.list, self)
    def isUnfinished(self):
        return self.code in '@'
    def isFinished(self):
        return not self.isUnfinished()
    def __str__(self):
        return '%s [%s]' % (self.what, self.project.title)

class Project(object):
    log = logging.getLogger('project')
    def __init__(self):
        self.data = None
        self.title = ''
        self.fname = ''
        self.paras = []
        self.actions = []
        pass

    def readfile(self, fname, shortname):
        self.fname = fname
        self.shortname = shortname
        self.log.debug('reading %s', fname)
        self.modtime = os.stat(fname)[stat.ST_MTIME]

        self.lines = open(fname, 'r').readlines()
        try:
            self.title = self.lines[0][:-1].strip()
        except IndexError:
            self.log.error('%s has no first line!', shortname)
        self.check_actionlists()

    def __str__(self):
        return '%s (%s)' % (self.title, self.fname)

    def check_actionlists(self):
        self.paras = []
        p  = []
        for line in self.lines[1:]:
            m = actionmatcher.search(line)
            if m:
                l = m.group('list')
                what = m.group('what')
                code = m.group('code')

                what.strip()
                code.strip()

                ai = ActionItem(l, code, what, self)
                self.actions.append(ai)
                self.paras.append(' '.join(p))
                if code in '@':
                    self.paras.append(code + l + ': ' + what)
                p = []
            else:
                if line.strip() == '':
                    self.paras.append(' '.join(p))
                    p = []
                else:
                    p.append(line.strip())
        if p:
            self.paras.append(' '.join(p))



def read_projects():
    base = os.path.expanduser(gtd_dir)
    base = os.path.expandvars(base)
    projs = []

    log = logging.getLogger('walker')

    log.debug('starting at %s', base)

    for root, dirs, files in os.walk(base):
        if '.bzr' in dirs:
            dirs.remove('.bzr')
        for d in dirs:
            if d.startswith('.'):
                dirs.remove(d)
        nonhidden = [ f for f in files if f[0] != '.' and f.endswith('.gtd')]
        for f in nonhidden:
            log.debug('parse %s', os.path.join(root, f))
            p = Project()
            p.readfile(os.path.join(root, f), f)
            projs.append(p)

    return projs

def parse_cmdargs():
    parser = OptionParser()
    parser.add_option('-a', '--actions', action='store_true', default=0,
            dest='show_action', help='show actions')
    parser.add_option('-p', '--projects', action='store_true', default=0, 
            dest='show_projects', help='show projects')

    parser.add_option('-P', '--print', action='store_true',
            default=0, dest='output_printer', help='Send pdf output to printer.')
    parser.add_option('-s', '--stdout', action='store_true',
            default=0, dest='output_stdout', help='Display output on stdout')
    parser.add_option('', '--pdf', action='store_true',
            default=0, dest='output_pdf', help='Display output in pdf file')

    parser.add_option('-A', '--all', action='store_true', default=0,
            dest='use_all_categories', help='Also display categories normally hidden (' 
                    + ','.join(autohidden) + ')')
    parser.add_option('-C', '--show-categories', action='store_true',
            default=0, dest='show_categories', help='Display available categories')
    parser.add_option('-c', '--category', action='store', dest='category',
            default='',help='limit output/pdf to specified category. For multiple categories, seperate them by a colon.')
    parser.add_option('-x', '--exclude', action='store',
            default=0, dest='exclude', help='Exclude selected categories (separate with colons) from the output.')

    parser.add_option('-n', '--show-numbers', action='store_true',
            default=0, dest='show_numbers', help='if displaying categories, write the number of entries in that category')
    parser.add_option('-v', '--verbose', action='store_true',
            default=0, dest='verbose')
    parser.add_option('-d', '--debug', action='store_true',
            default=0, dest='debug', help='turn debugging output on.')

    (option, args) = parser.parse_args()

    option.filename = 'gtdlist.pdf'

    return option, args

def generate_pdf(op, projs, latest_time):
    flowlog.debug('generate_pdf')

    gtdpdfprinter.print_actionlist(op, ActionItem.actionlist, fname=op.filename,
            projects=projs, modtime=latest_time)
    return

def filter_lists(options):
    if not options.category:
        showcategories = ActionItem.actionlist.keys()
        if not options.use_all_categories:
            showcategories = [ s for s in showcategories if s not in
                    ('waitfor', 'maybe', 'someday', 'defer')]
        showcategories.sort()
    else:
        showcategories = options.category.split(':')

    if options.exclude:
        for c in optios.exclude.split(':'):
            try:
                showcategories.remove(c)
            except ValueError:
                pass
    categories = {}
    for s in showcategories:
        if s in ActionItem.actionlist.keys():
            l = [a for a in ActionItem.actionlist[s] if a.isUnfinished() or options.verbose]
            if l:
                categories[s] = l



    ActionItem.actionlist = categories

def show_actions_stdout(elements):
    for k in elements.keys():
        print k
        for it in elements[k]:
            if it.isUnfinished() or op.verbose:
                out = str(it)
                for l in wrap(out):
                    print '   ', l
def show_projects_stdout(projs):
    for p in projs:
        print p

def shorten_path(f):
    homedir = os.path.expanduser("~")

    if f.startswith(homedir):
        return os.path.join('~', f[len(homedir)+1:])
    return f

def generate_indexfile(projs):
    base = os.path.expanduser(gtd_dir)
    base = os.path.expandvars(base)

    f = open(os.path.join(base, "index"), 'w')
    f.write('Files in gtd:   # vim tw=0 ro nowrap\n')


    for p in projs:
        f.write('%-25s - %s\n'% (shorten_path(p.fname), p.title))

    f.close()

def main():
    op, args = parse_cmdargs()
    if op.debug:
        logging.getLogger().setLevel(logging.DEBUG)

    #print 'options', op
    #print 'args', args

    p = read_projects()
    latest_mtime = max( (x.modtime for x in p) )

    ActionItem.actionlist.filter(op)
    elements = ActionItem.actionlist.getFilteredElements()
    generate_indexfile(p)
    if op.show_categories:
        k = elements.keys()
        k.sort()
        if op.show_numbers:
            for item in k:
                print item, len(elements[item])
        else:
            for l in wrap(', '.join(k)):
                print l

    if op.output_pdf or op.output_printer:
        generate_pdf(op, p, latest_mtime)
        if op.output_printer:
            print_file(op.filename)
    if op.output_stdout:
        if op.show_action:
            show_actions_stdout(elements)
        if op.show_projects:
            show_projects_stdout(p)

    return p

if __name__ == '__main__':
    p = main()

